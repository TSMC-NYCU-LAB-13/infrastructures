namespace: monitoring
nameOverride: ""
fullnameOverride: ""

image: # see: https://quay.io/repository/kiali/kiali-operator?tab=tags
  repo: quay.io/kiali/kiali-operator # quay.io/kiali/kiali-operator
  tag: v1.51.0 # version string like v1.39.0 or a digest hash
  digest: "" # use "sha256" if tag is a sha256 hash (do NOT prefix this value with a "@")
  pullPolicy: Always
  pullSecrets: []

# Deployment options for the operator pod.
nodeSelector: {}
podAnnotations: {}
env: []
tolerations: []
resources:
  requests:
    cpu: "10m"
    memory: "64Mi"
affinity: {}
replicaCount: 1
priorityClassName: ""

# metrics.enabled: set to true if you want Prometheus to collect metrics from the operator
metrics:
  enabled: true

# debug.enabled: when true the full ansible logs are dumped after each reconciliation run
# debug.verbosity: defines the amount of details the operator will log (higher numbers are more noisy)
# debug.enableProfiler: when true (regardless of debug.enabled), timings for the most expensive tasks will be logged after each reconciliation loop
debug:
  enabled: true
  verbosity: "1"
  enableProfiler: false

# Defines where the operator will look for Kial CR resources. "" means "all namespaces".
watchNamespace: ""

# Set to true if you want the operator to be able to create cluster roles. This is necessary
# if you want to support Kiali CRs with spec.deployment.accessible_namespaces of '**'.
# Note that this will be overriden to "true" if cr.create is true and cr.spec.deployment.accessible_namespaces is ['**'].
clusterRoleCreator: true

# Set to a list of secrets in the cluster that the operator will be allowed to read. This is necessary if you want to
# support Kiali CRs with spec.kiali_feature_flags.certificates_information_indicators.enabled=true.
# The secrets in this list will be the only ones allowed to be specified in any Kiali CR (in the setting
# spec.kiali_feature_flags.certificates_information_indicators.secrets).
# If you set this to an empty list, the operator will not be given permission to read any additional secrets
# found in the cluster, and thus will only support a value of "false" in the Kiali CR setting
# spec.kiali_feature_flags.certificates_information_indicators.enabled.
secretReader: ['cacerts', 'istio-ca-secret']

# Set to true if you want to allow the operator to only be able to install Kiali in view-only-mode.
# The purpose for this setting is to allow you to restrict the permissions given to the operator itself.
onlyViewOnlyMode: false

# allowAdHocKialiNamespace tells the operator to allow a user to be able to install a Kiali CR in one namespace but
# be able to install Kiali in another namespace. In other words, it will allow the Kiali CR spec.deployment.namespace
# to be something other than the namespace where the CR is installed. You may want to disable this if you are
# running in a multi-tenant scenario in which you only want a user to be able to install Kiali in the same namespace
# where the user has permissions to install a Kiali CR.
allowAdHocKialiNamespace: true

# allowAdHocKialiImage tells the operator to allow a user to be able to install a custom Kiali image as opposed
# to the image the operator will install by default. In other words, it will allow the
# Kiali CR spec.deployment.image_name and spec.deployment.image_version to be configured by the user.
# You may want to disable this if you do not want users to install their own Kiali images.
allowAdHocKialiImage: false

# For what a Kiali CR spec can look like, see:
# https://github.com/kiali/kiali-operator/blob/master/deploy/kiali/kiali_cr.yaml
cr:
  create: true
  name: kiali
  # If you elect to create a Kiali CR (--set cr.create=true)
  # and the operator is watching all namespaces (--set watchNamespace="")
  # then this is the namespace where the CR will be created (the default will be the operator namespace).
  namespace: monitoring

  spec:
    istio_namespace: istio-system
    # istio_labels:
    #   app_label_name: "app.kubernetes.io/name"
    #   version_label_name: "app.kubernetes.io/version"
    server:
      web_fqdn: kiali.cwang.one
      web_port: 443
    deployment:
      view_only_mode: true
      accessible_namespaces:
      - '**'
      pod_labels:
        sidecar.istio.io/inject: "true"

      # verbose_mode: "4"
    auth:
      strategy: anonymous
      # strategy: openid
      # openid:
      #   # kubectl create secret generic kiali --from-literal="oidc-secret=kiali-client-secret" -n monitoring
      #   client_id: kiali-client
      #   issuer_uri: https://argocd.cwang.one/api/dex
      #   disable_rbac: true
      #   insecure_skip_verify_tls: true
      #   username_claim: email
      #   scopes: ["openid", "profile", "email", "groups"]
    external_services:
      istio:
        istio_component_namespaces:
          grafana: monitoring
          tracing: monitoring
          prometheus: monitoring
          istiod: istio-system
        component_status:
          components:
          - app_label: "istiod"
            is_core: true
            is_proxy: false
          - app_label: "istio-ingress"
            is_core: true
            is_proxy: true
            namespace: istio-system
          - app_label: "istio-egress"
            is_core: false
            is_proxy: true
            namespace: istio-system
          enabled: true
        config_map_name: "istio"
        envoy_admin_local_port: 15000
        istio_canary_revision:
          current: "1-9-9"
          upgrade: "1-10-2"
        istio_identity_domain: "svc.cluster.local"
        istio_injection_annotation: "sidecar.istio.io/inject"
        istio_sidecar_annotation: "sidecar.istio.io/status"
        istio_sidecar_injector_config_map_name: "istio-sidecar-injector"
        istiod_deployment_name: "istiod"
        istiod_pod_monitoring_port: 15014
        root_namespace: ""
        url_service_version: ""
      prometheus:
        url: "http://prometheus-operated.monitoring.svc.cluster.local:9090"
      grafana:
        auth:
          type: basic
          insecure_skip_verify: true
          password: "prom-operator"
          username: "admin"
        dashboards:
        - name: "Istio Service Dashboard"
          variables:
            namespace: "var-namespace"
            service: "var-service"
        - name: "Istio Workload Dashboard"
          variables:
            namespace: "var-namespace"
            workload: "var-workload"
        - name: "Istio Mesh Dashboard"
        - name: "Istio Control Plane Dashboard"
        - name: "Istio Performance Dashboard"
        - name: "Istio Wasm Extension Dashboard"
        enabled: true
        health_check_url: ""
        in_cluster_url: "http://kube-prometheus-stack-grafana.monitoring.svc.cluster.local"
        is_core: false
        url: "https://grafana.cwang.one"
      tracing:
        enabled: true
        auth:
          insecure_skip_verify: true
        in_cluster_url: "http://jaeger-tracing-query.monitoring.svc.cluster.local:16685"
        # in_cluster_url: "http://jaeger-tracing-query.monitoring.svc.cluster.local"
        is_core: false
        url: "https://jaeger-tracing-query.cwang.one"
        # use_grpc: false
        # whitelist_istio_system: ["jaeger-query", "jaeger-tracing-query", "istio-ingress"]
        namespace_selector: true
        # namespace: monitoring
        # service: jaeger-tracing-query
